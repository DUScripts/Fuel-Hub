{"slots":{"0":{"name":"Slot_10","type":{"events":[],"methods":[]}},"1":{"name":"Slot_9","type":{"events":[],"methods":[]}},"2":{"name":"Slot_8","type":{"events":[],"methods":[]}},"3":{"name":"Slot_7","type":{"events":[],"methods":[]}},"4":{"name":"Slot_6","type":{"events":[],"methods":[]}},"5":{"name":"Slot_5","type":{"events":[],"methods":[]}},"6":{"name":"Slot_4","type":{"events":[],"methods":[]}},"7":{"name":"Slot_3","type":{"events":[],"methods":[]}},"8":{"name":"Slot_2","type":{"events":[],"methods":[]}},"9":{"name":"Slot_1","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"init = false\n\n-- Exports\nUse24HourClock = false --export\nTimeAdjustMinutes = 0 --export\nEmitterChannel = 'FUELCH' --export\n\n-- Data Objects\nFuelTanks = {}\nScreens = {}\nDatabanks = {}\nEmitters = {}\n\n-- Slot Objects\nFuelSlots = {}\nScreenSlots = {}\nDatabankSlots = {}\nEmitterSlots = {}\n\n-- Slot Object Counts\nFuelTankCount = 0\nScreenCount = 0\nDatabankCount = 0\nEmitterCount = 0\n\n-- Slot Objects Found\nFuelTankFound = false\nScreenFound = false\nDatabankFound = false\nEmitterFound = false\n\nUpdateDataIndex = 1\nSendDataIndex = 1\nDoReset = true\n\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getClass then\n        local slotClass = slot.getClass():lower()\n        if slotClass == 'atmofuelcontainer' or slotClass == 'spacefuelcontainer' or slotClass == 'rocketfuelcontainer' then\n            FuelTankFound = true\n            FuelTankCount = FuelTankCount + 1\n            FuelSlots[#FuelSlots+1] = slot\n        elseif slotClass == 'screenunit' then\n            ScreenCount = ScreenCount + 1\n            ScreenFound = true\n            ScreenSlots[#ScreenSlots+1] = slot\n        elseif slotClass == 'databankunit' then\n            DatabankCount = DatabankCount + 1\n            DatabankFound = true\n            DatabankSlots[#DatabankSlots+1] = slot\n        elseif slotClass == 'emitterunit' then\n            EmitterCount = EmitterCount + 1\n            EmitterFound = true\n            EmitterSlots[#EmitterSlots+1] = slot\n        elseif slotClass == 'generic' then\n            -- Do nothing\n        else\n            system.print('Element ['..slot.getName()..'] of type ['..slot.getClass()..'] is not supported')\n        end\n    end\nend\n\nunit.setTimer('UpdateData', 0.05)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"if not init then\n    for k, v in pairs(FuelSlots) do\n        FuelTanks[#FuelTanks+1] = BuildFuelTank(v)\n    end\n    \n    for k, v in pairs(ScreenSlots) do\n        Screens[#Screens+1] = BuildScreen(v)\n        Screens[#Screens]._this.setRenderScript(GetScreenScript())\n    end\n    \n    for k, v in pairs(DatabankSlots) do\n        Databanks[#Databanks+1] = BuildDatabank(v)\n    end\n    \n    for k, v in pairs(EmitterSlots) do\n        Emitters[#Emitters+1] = BuildEmitter(v)\n    end\n   \n    unit.setTimer('SendData', 0.05)\n    init = true\nelse\n    if FuelTankCount > 0 then\n        UpdateTankData(FuelTanks[UpdateDataIndex])  \n    end\n    \n    UpdateDataIndex = UpdateDataIndex + 1\n    \n    if UpdateDataIndex > FuelTankCount then\n        UpdateDataIndex = 1\n    end\nend\n\n","filter":{"args":[{"value":"UpdateData"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"if DoReset then\n    SendReset()\n    DoReset = false\nelse\n   if FuelTankCount > 0 then\n       SendTankData(SendDataIndex, FuelTanks[SendDataIndex])\n       SendDataIndex = SendDataIndex + 1\n\n       if SendDataIndex > FuelTankCount then\n          SendDataIndex = 1\n       end\n    end \nend","filter":{"args":[{"value":"SendData"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"SendReset()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"},{"code":"DoReset = true","filter":{"args":[{"value":"reset"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"4"},{"code":"debug = false\n\nfunction Ternary(c,x,y) if c then return x else return y end end\nfunction SendReset() SendData(nil, 'RESET', false) end\nfunction BuildScreen(this) return BuildGeneric(this) end\nfunction BuildEmitter(this) return BuildGeneric(this) end\nfunction BuildDatabank(this) return BuildGeneric(this) end\n\nfunction BuildGeneric(this)\n   local generic = {} \n    \n    generic._this = this\n    generic.Name = this.getName()\n    generic.Class = this.getClass()\n    generic.ItemId = this.getItemId()\n    generic.LocalId = this.getLocalId()\n    generic.Integrity = this.getIntegrity()\n    generic.HitPoints = this.getHitPoints()\n    generic.MaxHitPoints = this.getMaxHitPoints()\n    generic.HasChanged = true\n    return generic\nend\n\nfunction GetFuelName(this)\n    if this.Class:lower() == 'atmofuelcontainer' then return 'Nitron'\n    elseif this.Class:lower() == 'spacefuelcontainer' then return GetSpaceFuelType(this)\n    elseif this.Class:lower() == 'rocketfuelcontainer' then return 'Xeron'\n    end\nend\n\nfunction GetSpaceFuelType(this)\n    if this.FuelName == 'Kergon-x?' and this.FuelVolume > 0 then\n        this._this.updateContent()\n        local items = this._this.getContent()\n        \n        for k,v in ipairs(items) do\n            local item = system.getItem(v.id)\n            system.print(Ternary(item.displayName == nil, 'Kergon-x?', item.displayName))\n            return Ternary(item.displayName == nil, 'Kergon-x?', string.sub(item.displayName,1,-6))\n        end\n    elseif this.FuelName == nil or this.FuelVolume <= 0 then\n        return 'Kergon-x?'\n    end\n    return this.FuelName\nend\n\nfunction BuildFuelTank(this)\n    local tank = BuildGeneric(this)\n    \n    tank.SelfMass = this.getSelfMass()\n    tank.FuelMass = this.getItemsMass()\n    tank.FuelVolume = this.getItemsVolume()\n    tank.MaxVolume = this.getMaxVolume()\n    tank.RemainingRestorations = this.getRemainingRestorations()\n    tank.MaxRestorations = this.getMaxRestorations()\n    tank.FuelName = GetFuelName(tank)\n    return tank\nend\n\nfunction UpdateTankData(tank)\n    local t = {}\n    local hasChanged = false\n    \n    t.Integrity = tank._this.getIntegrity()\n    t.HitPoints = tank._this.getHitPoints()\n    t.MaxHitPoints = tank._this.getMaxHitPoints()\n    t.SelfMass = tank._this.getSelfMass()\n    t.FuelMass = tank._this.getItemsMass()\n    t.FuelVolume = tank._this.getItemsVolume()\n    t.MaxVolume = tank._this.getMaxVolume()\n    t.RemainingRestorations = tank._this.getRemainingRestorations()\n    t.MaxRestorations = tank._this.getMaxRestorations()\n    t.FuelName = GetFuelName(tank)\n    \n    hasChanged = AreTanksEqual(tank,t)\n    \n    tank.Integrity = t.Integrity\n    tank.HitPoints = t.HitPoints\n    tank.MaxHitPoints = t.MaxHitPoints\n    tank.SelfMass = t.SelfMass\n    tank.FuelMass = t.FuelMass\n    tank.FuelVolume = t.FuelVolume\n    tank.MaxVolume = t.MaxVolume\n    tank.RemainingRestorations = t.RemainingRestorations\n    tank.MaxRestorations = t.MaxRestorations\n    tank.FuelName = t.FuelName\n    \n    return hasChanged\nend\n\nfunction AreTanksEqual(a,b)\n    local equal = true\n    equal = equal and a.Integrity == b.Integrity\n    equal = equal and a.HitPoints == b.HitPoints\n    equal = equal and a.MaxHitPoints == b.MaxHitPoints\n    equal = equal and a.SelfMass == b.SelfMass\n    equal = equal and a.FuelMass == b.FuelMass\n    equal = equal and a.FuelVolume == b.FuelVolume\n    equal = equal and a.MaxVolume == b.MaxVolume\n    equal = equal and a.RemainingRestorations == b.RemainingRestorations\n    equal = equal and a.MaxRestorations == b.MaxRestorations\n    equal = equal and a.FuelName == b.FuelName\n    return equal\nend\n\nfunction SendData(id, s, changed)\n    if s ~= nil then\n        for k, v in pairs(Screens) do\n            v._this.setScriptInput(s..'~'..GetCurrentTimeString())\n        end\n\n        if changed then\n            for k, v in pairs(Databanks) do\n                v._this.setStringValue('FTD'..id,s)\n            end\n\n            for k, v in pairs(Emitters) do\n                v._this.send(EmitterChannel,s)\n            end \n        end\n    end\nend\n\nfunction SendTankData(id, tank)\n    local s = 'F~'..\n    tank.LocalId..'~'..\n    string.sub(tank.Class,1,1)..'~'..\n    tank.Name..'~'..\n    tank.FuelVolume..'~'..\n    tank.MaxVolume..'~'..\n    tank.SelfMass..'~'..\n    tank.FuelMass..'~'..\n    tank.Integrity..'~'..\n    tank.HitPoints..'~'..\n    tank.MaxHitPoints..'~'..\n    tank.RemainingRestorations..'~'..\n    tank.MaxRestorations..'~'..\n    tank.FuelName\n    \n    SendData(id, s, tank.HasChanged)\n    tank.HasChanged = false\nend\n\nfunction GetCurrentTimeString()\n   local allseconds = math.floor(system.getUtcTime() + system.getUtcOffset() + (TimeAdjustMinutes * 60))\n   local daySeconds = math.floor(allseconds % 86400)\n   local hoursPassed = Ternary(Use24HourClock,math.floor(daySeconds / 3600),math.floor(math.floor(daySeconds / 3600) % 12))\n   local minutesPassed = math.floor((daySeconds % 3600) / 60)\n   local secondsPassed = math.floor((daySeconds % 3600) % 60)\n   return string.format(\"%02d\",hoursPassed) .. \":\" .. string.format(\"%02d\",minutesPassed) .. \":\" .. string.format(\"%02d\",secondsPassed)\nend\n\nfunction GetScreenScript()\n  return [[\n    if not init then\n    init = true\n    HeaderText = 'FUEL HUB'\n    LastInput = \"\"\n    Tick = 0\n    Time = '00:00:00'\n   \n    -- Obejcts \n    Mouse = nil\n    Screen = nil\n    FuelTanks = {}\n    SelectedItemIndex = nil\n    SelectedButtonIndex = nil\n    CurrentImage = nil\n    InfoColumnWidthPadding = 125\n    HasAtmo = false\n    HasSpace = false\n    HasRocket = false\n    ShowAtmo = true\n    ShowSpace = true\n    ShowRocket = true\n    IsFadingUp = true\n    \n    FuelTypes = {}\n    FuelTypes[1] = {Name = 'Nitron', Icon = \"resources_generated/iconsLib/materialslib/Nitron.png\"}\n    FuelTypes[2] = {Name = 'Kergon', Icon = \"resources_generated/iconsLib/materialslib/Kergon.png\"}\n    FuelTypes[3] = {Name = 'Xeron', Icon = \"resources_generated/iconsLib/materialslib/Xeron.png\"}\n        \n    -- Functions\n    function Ternary(condition,x,y) if condition then return x else return y end end\n    function ToColor(w,x,y,z) return {r = w, g = x, b = y, o = z} end\n    function GetPerc(x,y) return math.floor((x/y)*100) end\n    function GetPercNum(x,y) return math.floor((x*y)/100) end\n    \n    function DoReset() \n       FuelTanks = {} \n       HasAtmo = false\n       HasSpace = false\n       HasRocket = false\n    end\n    \n    function Split(s, delimiter)\n        result = {};\n        for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n            table.insert(result, match);\n        end\n        return result;\n    end\n    \n    function DisplayText(layer, fnt, text, x, y, alignH, alignV, color)\n        setNextFillColor(layer, color.r, color.g, color.b, color.o)\n        setNextTextAlign(layer, alignH, alignV)\n        addText(layer, fnt, text, x, y)\n    end\n    \n    function DisplayBox(layer, x, y, w, h, fill, shadow, blur, round, stroke, strokeWidth)\n        if stroke ~= nil then setNextStrokeColor(layer, stroke.r, stroke.g, stroke.b, stroke.o) end\n        if strokeWidth ~= nil then setNextStrokeWidth(layer, strokeWidth) end\n        if shadow ~= nil then setNextShadow(layer, blur, shadow.r, shadow.g, shadow.b, shadow.o) end\n        if fill ~= nil then setNextFillColor(layer, fill.r, fill.g, fill.b, fill.o) end\n        if round ~= nil then addBoxRounded(layer, x, y, w, h, round) else addBox(layer, x, y, w, h) end\n    end\n    \n    function GetFuelTank(i)\n        local found = false\n        local f = NewFuelTank(i)\n        \n        for k, v in pairs(FuelTanks) do \n            if v.Id == f.Id then\n               found = true\n               FuelTanks[k] = f\n            else\n               if f.Class == \"A\" then HasAtmo = true\n               elseif f.Class == \"S\" then HasSpace = true\n               elseif f.Class == \"R\" then HasRocket = true\n               end\n            end\n        end\n        \n        if not found then\n           table.insert(FuelTanks, 1, f)\n           SortByFuelType(nil)\n        end\n    end\n    \n    function GetMouse()\n        local mx, my = getCursor()\n        Mouse = {x = mx, y = my, Down = getCursorDown(), Release = getCursorReleased()}\n    end\n    \n    function GetScreen()\n        local s = {}\n        local x, y = getResolution()\n        s.Width = x\n        s.Height = y\n        s.HalfWidth = math.floor(x/2)\n        s.HalfHeight = math.floor(y/2)\n        s.ThirdWidth = math.floor(x/3)\n        s.ThirdHeight = math.floor(y/3)\n        s.HeaderWidth = 1050\n        s.HeaderHeight = 52\n        s.InfoWidth = math.floor(math.floor(x*0.15)*0.62)\n        s.InfoHeight = y\n        s.HalfInfoWidth = math.floor(math.floor(math.floor(x*0.38)*0.62)/2)\n        s.HalfInfoHeight = math.floor(y/2)\n        s.ContentWidth = x - math.floor(math.floor(x*0.38)*0.62)\n        s.ContentHeight = y\n        s.HalfContentWidth = math.floor((x - math.floor(math.floor(x*0.38)*0.62))/2)\n        s.HalfContentHeight = math.floor(y/2)\n        Screen = s\n    end\n    \n    function CreateButton(i, layer, layer2, font, img, x, tx, y, mx, my, r, tc)\n        local click = false\n        local btnHeight = Screen.InfoWidth\n        local maxNameLen = 33\n        \n        if r and mx > x and mx < x + tx and my > y and my < y + btnHeight then click = true end\n        if tc == nil then tc = ToColor(0.8, 0.8, 0.8, 1) end\n        \n        DisplayBox(layer, x, y, Screen.InfoWidth, btnHeight, Ternary(SelectedItemIndex == i,ToColor(0.15, 0.15, 0.15, 0.5),ToColor(0.25, 0.25, 0.25, 0.5)), Ternary(SelectedItemIndex == i,ToColor(0.8, 0.8, 0.8, 0.5),ToColor(0, 0, 0, 0.5)), 2, nil, nil, nil)\n        addImage(layer2, img, 5, y+5, Screen.InfoWidth - 10, Screen.InfoWidth - 10)\n        return click\n    end\n    \n    function HandleInput()\n        local inputstring = getInput()\n        local input = nil\n        \n        if (inputstring ~= \"\" and LastInput ~= inputstring) then input = Split(inputstring, \"~\") end\n        if input ~= nil then ProcessInput(input) end\n    end\n    \n    function ProcessInput(i) \n        if i[1] == 'F' then\n           GetFuelTank(i)\n           Time = i[#i]\n        elseif i[1] == 'RESET' then\n            DoReset()\n        end \n    end\n    \n    function DisplayTextArea(layer, text, x, y, width, maxlength, font, alignH, alignV, color)\n        local length = text:len()\n        color = Ternary(color ~= nil, color, ToColor(.8, .8, .8, 1))\n        \n        if alignH == nil then alignH = AlignH_Left end\n        if alignV == nil then alignV = AlignV_Middle end\n        \n        for i = 1, math.ceil(length/maxlength)+1, 1 do\n            local startindex = (i-1)*maxlength + 1\n            local endindex = i*maxlength\n            local subtext = string.sub(text, startindex, Ternary(endindex <= length, endindex, length))\n            DisplayText(layer, font, subtext, x, y + (20*i), alignH, alignV, color)\n        end\n    end\n    \n    function GetFuelBarColor(p)\n        local c = {}\n        local n = 0\n        \n        if p > 50 then\n            n = math.floor(GetPercNum(800, (p - 50) * 2)) * 0.001\n            c = ToColor(1.0 - n, 1.0, 0.2, 1)\n        else\n            n = math.floor(GetPercNum(800, p * 2)) * 0.001\n            c = ToColor(1.0, 0.2 + n, 0.2, 1)\n        end\n        return c\n    end\n    \n    function GetHealthBarColor(p)\n        local c = {}\n        local n = 0\n        \n        if p > 50 then\n            n = math.floor(GetPercNum(800, (p - 50) * 2)) * 0.001\n            c = ToColor(1.0, 1.0 - n, 1.0, 1)\n        else\n            n = math.floor(GetPercNum(800, p * 2)) * 0.001\n            c = ToColor(1.0, 1.0, 0.2 + n, 1)\n        end\n        return c\n    end\n    \n    function GetFuelColor(c)\n        if c == 'A' then return ToColor(0.2,0.5,1,1)\n        elseif c == 'S' then return ToColor(1,1,0.2,1)\n        elseif c == 'R' then return ToColor(1,0.2,1,1)\n        end\n    end\n    \n    function NewFuelTank(i)\n        t = {}\n        t.Id = i[2]\n        t.Class = i[3]\n        t.Name = i[4]\n        t.FuelVolume = i[5]\n        t.MaxVolume = i[6]\n        t.SelfMass = i[7]\n        t.FuelMass = i[8]\n        t.Integrity = i[9]\n        t.HitPoints = i[10]\n        t.MaxtHitPoints = i[11]\n        t.RemainingRestorations = i[12]\n        t.MaxRestorations = i[13]\n        t.FuelName = i[14]\n        return t\n    end\n    \n    function DisplayFuelBar(layer, layer2, i, v, fnt, fnt2, fnt3, x, y)\n        local fuelColor = nil\n        local fuelBarColor = nil\n        local hpBarColor = nil\n        local isEmpty = false\n        local isOffline = false\n        local fadeTick = 0\n        local fuelPerc = GetPerc(tonumber(v.FuelVolume),tonumber(v.MaxVolume))\n        local healthPerc = GetPerc(tonumber(v.FuelVolume),tonumber(v.MaxVolume))\n        \n        if Mouse.Release and Mouse.x > x and Mouse.x < x + 915 and Mouse.y > (y-17) and Mouse.y < (y-17) + 52 then SelectedItemIndex = i end\n        \n        fuelColor = GetFuelColor(v.Class)\n        fuelBarColor = GetFuelBarColor(fuelPerc)\n        hpBarColor = GetHealthBarColor(tonumber(v.Integrity))\n        \n        if fuelPerc == 0 then isEmpty = true end\n        if tonumber(v.Integrity) == 0 then isOffline = true end\n        if IsFadingUp then fadeTick = 1 - ((Tick % 25) * 0.04) else fadeTick = (Tick % 25) * 0.04 end\n        \n        DisplayText(layer, fnt, v.Name, x + 5, y - 2, AlignH_Left, AlignV_Middle, ToColor(0.8,0.8,0.8,1))\n        DisplayText(layer, fnt, math.floor(tonumber(v.FuelVolume))..'|'..math.floor(tonumber(v.MaxVolume))..' L', x + 715, y - 2, AlignH_Right, AlignV_Middle, ToColor(0.8,0.8,0.8,1))\n        DisplayText(layer, fnt, v.FuelName, x + 835, y - 2, AlignH_Right, AlignV_Middle, fuelColor)\n        DisplayText(layer, fnt2, fuelPerc..'%', x + 880, y + 10, AlignH_Center, AlignV_Middle, ToColor(0.8,0.8,0.8,1))\n        DisplayBox(layer, x, y - 17, 915, 52, ToColor(0,0,0,1), nil, nil, nil, fuelColor, 1)\n        DisplayBox(layer, x + 1, y + 12, GetPercNum(840, fuelPerc), 22, fuelBarColor, nil, nil, nil, nil, nil)\n        \n        if tonumber(v.Integrity) < 100 then\n            DisplayBox(layer, x + 1, y + 32, GetPercNum(840, tonumber(v.Integrity)), 2, hpBarColor, nil, nil, nil, nil, nil)\n        end\n        \n        DisplayBox(layer, x + 841, y - 16, 73, 50, ToColor(0.05,0.05,0.05,1), nil, nil, nil, nil, nil)\n        \n        if isEmpty or isOffline then\n            DisplayBox(layer2, x, y - 17, 915, 52, ToColor(0,0,0,0.85), nil, nil, nil, ToColor(1.0,0.2,0.2,1), 1)\n            DisplayText(layer2, fnt3, Ternary(isOffline,'OFFLINE','EMPTY'), x + 440, y+10, AlignH_Center, AlignV_Middle, ToColor(1.0,0.2,0.2,fadeTick))\n        end\n    end\n    \n    function SortByFuelType(o)\n        local ot = {}\n        local tot = {}\n        tot[1] = {}\n        tot[2] = {}\n        tot[3] = {}\n        \n        if o == nil then\n           o = {'a','s','r'} \n        end\n        \n        for k,v in ipairs(FuelTanks) do\n            if v.Class == 'A' then\n                table.insert(tot[1], 1, v)\n            elseif v.Class == 'S' then\n                table.insert(tot[2], 1, v)\n            elseif v.Class == 'R' then\n                table.insert(tot[3], 1, v)\n            end\n        end\n\n        for k,v in ipairs(o) do\n            if v == 'a' then\n                for j, w in ipairs(tot[1]) do table.insert(ot, #ot+1, w) end    \n            elseif v == 's' then\n                for j, w in ipairs(tot[2]) do table.insert(ot, #ot+1, w) end\n            elseif v == 'r' then\n                for j, w in ipairs(tot[3]) do table.insert(ot, #ot+1, w) end\n            end\n        end\n        \n        FuelTanks = ot\n    end\n    \n    -- These only need called on init\n    GetScreen()\nend\n\n-- Layers\nlocal forelayer = createLayer()\nlocal panellayer = createLayer()\nlocal backlayer = createLayer()\nlocal headerfont = loadFont(\"RefrigeratorDeluxe\", 30)\nlocal subheaderfont = loadFont(\"FiraMono-Bold\", 30)\nlocal font = loadFont(\"FiraMono-Bold\", 20)\nlocal subfont = loadFont(\"FiraMono-Bold\", 45)\n\n-- Player Actions\nTick = Tick + 1\n\nif Tick % 50 == 0 and Tick % 25 == 0 then\n    IsFadingUp = true\nelseif Tick % 25 == 0 then\n    IsFadingUp = false\nend\n\nGetMouse()\nHandleInput()\n\nfor k,v in ipairs(FuelTypes) do\n    CurrentImage = loadImage(FuelTypes[k].Icon)\n    local selected = false\n    \n    if FuelTypes[k].Name == 'Nitron' and HasAtmo or FuelTypes[k].Name == 'Kergon' and HasSpace or FuelTypes[k].Name == 'Xeron' and HasRocket then \n        selected = CreateButton(k, panellayer, backlayer, font, CurrentImage, 0, Screen.InfoWidth, Screen.HeaderHeight+(Screen.InfoWidth*(k-1)), Mouse.x, Mouse.y, Mouse.Release)\n    end\n    \n    if selected then\n        if FuelTypes[k].Name == 'Nitron' then\n            ShowAtmo = not ShowAtmo\n        elseif FuelTypes[k].Name == 'Kergon' then\n            ShowSpace = not ShowSpace\n        elseif FuelTypes[k].Name == 'Xeron' then\n            ShowRocket = not ShowRocket\n        end\n    end\nend\n\nif SelectedItemIndex == nil then\n    local buildCount = 1\n    for k,v in ipairs(FuelTanks) do\n        if v.Class == 'A' and ShowAtmo or v.Class == 'S' and ShowSpace or v.Class == 'R' and ShowRocket then\n            DisplayFuelBar(panellayer, backlayer, k, v, font, headerfont, subfont, Screen.InfoWidth + 10, (60 * buildCount) + 25)\n            buildCount = buildCount + 1\n        end\n    end\nelse\n    local i = FuelTanks[SelectedItemIndex]\n    local f = FuelTypes[Ternary(i.Class == 'A',1,Ternary(i.Class == 'S', 2, 3))]\n    \n    -- Header, Description, and Image\n    CurrentImage = loadImage(f.Icon)\n    DisplayText(forelayer, subheaderfont, i.Name, Screen.InfoWidth+10, Screen.HeaderHeight + 45, AlignH_Left, AlignV_Middle, ToColor(.8, .8, .2, 1))\n    addImage(forelayer, CurrentImage, Screen.Width - 250, Screen.HeaderHeight + 25, 250, 250)\n    DisplayTextArea(forelayer, i.FuelName, Screen.InfoWidth+10, Screen.HeaderHeight + 55, nil, 65, font, nil, nil, GetFuelColor(i.Class))\n    \n    -- Volume\n    DisplayText(forelayer, subheaderfont, \"Volume\", Screen.InfoWidth+InfoColumnWidthPadding, Screen.HalfHeight - 70, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))\n    DisplayText(forelayer, subheaderfont, math.ceil(i.FuelVolume)..'|'..math.ceil(i.MaxVolume)..' L', Screen.InfoWidth+InfoColumnWidthPadding, Screen.HalfHeight - 30, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))\n    \n    -- Mass\n    DisplayText(forelayer, subheaderfont, \"Mass\", Screen.HalfContentWidth+Screen.InfoWidth, Screen.HalfHeight - 70, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))\n    DisplayText(forelayer, subheaderfont, math.ceil(i.FuelMass)..' kg', Screen.HalfContentWidth+Screen.InfoWidth , Screen.HalfHeight - 30, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))\n\n    -- HitPoints\n    DisplayText(forelayer, subheaderfont, \"HitPoints\", Screen.InfoWidth+InfoColumnWidthPadding, Screen.HalfHeight+10, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))\n    DisplayText(forelayer, subheaderfont, math.ceil(i.HitPoints)..'|'..math.ceil(i.MaxtHitPoints), Screen.InfoWidth+InfoColumnWidthPadding, Screen.HalfHeight+50, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))\n    \n    -- Restorations\n    DisplayText(forelayer, subheaderfont, \"Restorations\", Screen.HalfContentWidth+Screen.InfoWidth, Screen.HalfHeight+10, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))\n    DisplayText(forelayer, subheaderfont, math.ceil(i.RemainingRestorations)..'|'..math.ceil(i.MaxRestorations), Screen.HalfContentWidth+Screen.InfoWidth , Screen.HalfHeight+50, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))\n    \n    -- Back Button\n    DisplayText(forelayer, subheaderfont, \"BACK\", Screen.InfoWidth+InfoColumnWidthPadding + math.floor(150/2), (Screen.Height - 70) + math.floor(52/2), AlignH_Center, AlignV_Middle, ToColor(.2, .2, .2, 1))\n    DisplayBox(forelayer, Screen.InfoWidth+InfoColumnWidthPadding, Screen.Height - 70, 150,  52, ToColor(1, 1, 0.2, 1), ToColor(0, 0, 0, 1), 25, nil, nil, nil)\n    \n    if Mouse.Release and Mouse.x > Screen.InfoWidth+InfoColumnWidthPadding and Mouse.x < Screen.InfoWidth+InfoColumnWidthPadding + 150 and Mouse.y > (Screen.Height - 70) and Mouse.y < (Screen.Height - 70) + 52 then \n        SelectedItemIndex = nil\n        logMessage('Back')\n    end\nend\n\n-- Header and Info\nDisplayBox(panellayer, 0, 0, Screen.InfoWidth, Screen.InfoHeight, ToColor(.3, .3, .3, 1), ToColor(0, 0, 0, 1), 15, nil, nil, nil)\nDisplayBox(backlayer, 0, 0, Screen.HeaderWidth,  Screen.HeaderHeight, ToColor(1, 1, 0.2, 1), ToColor(0, 0, 0, 1), 25, nil, nil, nil)\nDisplayText(backlayer, headerfont, HeaderText, Screen.HalfWidth, 30, AlignH_Center, AlignV_Middle, ToColor(.1, .1, .1, 1))\nDisplayText(backlayer, headerfont, Time, Screen.Width - 10, 30, AlignH_Right, AlignV_Middle, ToColor(.1, .1, .1, 1))\nsetBackgroundColor(.1, .1, .1)\n\nrequestAnimationFrame(2)\n    ]]  \nend\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"5"}],"methods":[],"events":[]}
